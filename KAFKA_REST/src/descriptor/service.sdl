{
  "name": "KAFKA_REST",
  "label": "Kafka REST Proxy",
  "description": "This is the Parrot distribution of the Confluent Kafka REST Proxy. The Kafka REST Proxy provides a RESTful interface to a Kafka cluster. It makes it easy to produce and consume messages, view the state of the cluster, and perform administrative actions without using the native Kafka protocol or clients. Examples of use cases include reporting data to Kafka from any frontend app built in any language, ingesting messages into a stream processing framework that doesn’t yet support Kafka, and scripting administrative actions. <span class=\"error\">Before adding this service, ensure that the Parrot parcel of the Confluent Kafka REST Proxy is <a href=\"../../../parcel/status\">downloaded, distributed and activated</a>.</span>",
  "version": "{{CSD_VERSION}}",
  "compatibility": {
    "generation": 1,
    "cdhVersion": {
      "min": "5",
      "max": "5"
    }
  },
  "runAs": {
    "user": "kafka",
    "group": "kafka",
    "principal": "kafka"
  },
  "icon": "images/parrot.png",
  "parcel": {
    "repoUrl": "http://matteocapitanio.com/parrot/KAFKA_REST/parcels/{{PARROT_VERSION}}/",
    "requiredTags": [
      "kafka-rest",
      "kafka"
    ]
  },
  "serviceDependencies": [
    {
      "name": "KAFKA",
      "required": "true"
    },
    {
      "name": "SCHEMA_REGISTRY",
      "required": "true"
    }
  ],
  "inExpressWizard": true,
  "parameters": [
    {
      "name": "port",
      "label": "Port",
      "description": "Port to listen on for new connections.",
      "required": true,
      "type": "port",
      "default": 8082,
      "configurableInWizard": true
    },
    {
      "name": "ssl.port",
      "label": "SSL Port",
      "description": "Port to listen on for new connections when SSL is enabled.",
      "required": true,
      "type": "port",
      "default": 8444,
      "configurableInWizard": true
    },
    {
      "name": "bootstrap.servers",
      "label": "Bootstrap Servers",
      "description": "A list of Kafka brokers to connect to. For example, PLAINTEXT://hostname:9092,SSL://hostname2:9092. This configuration is particularly important when Kafka security is enabled, because Kafka may expose multiple endpoints that all will be stored in ZooKeeper, but Kafka REST may need to be configured with just one of those endpoints. The client will make use of all servers irrespective of which servers are specified here for bootstrapping—this list only impacts the initial hosts used to discover the full set of servers. Since these servers are just used for the initial connection to discover the full cluster membership (which may change dynamically), this list need not contain the full set of servers (you may want more than one, though, in case a server is down).",
      "required": false,
      "type": "string_array",
      "configurableInWizard": true
    },
    {
      "name": "consumer.request.max.bytes",
      "label": "Consumer Request Max Bytes",
      "description": "Maximum number of bytes in unencoded message keys and values returned by a single request. This can be used by administrators to limit the memory used by a single consumer and to control the memory usage required to decode responses on clients that cannot perform a streaming decode. Note that the actual payload will be larger due to overhead from base64 encoding the response data and from JSON encoding the entire response.",
      "required": false,
      "type": "long",
      "default": 67108864,
      "unit": "bytes",
      "configurableInWizard": true
    },
    {
      "name": "consumer.request.timeout.ms",
      "label": "Consumer Request Timeout",
      "description": "The maximum total time to wait for messages for a request if the maximum number of messages has not yet been reached.",
      "required": false,
      "type": "long",
      "default": 600000,
      "unit": "milliseconds",
      "configurableInWizard": true
    },
    {
      "name": "consumer.threads",
      "label": "Consumer Threads",
      "description": "Number of threads to run consumer requests on.",
      "required": false,
      "type": "long",
      "default": 1,
      "configurableInWizard": true
    },
    {
      "name": "host.name",
      "label": "Hostname",
      "description": "The host name used to generate absolute URLs in responses. If empty, the default canonical hostname is used.",
      "required": false,
      "type": "string",
      "configurableInWizard": true
    },
    {
      "name": "simpleconsumer.pool.size.max",
      "label": "Simpleconsumer Pool Size Max",
      "description": "Maximum number of SimpleConsumers that can be instantiated per broker. If 0, then the pool size is not limited.",
      "required": false,
      "type": "long",
      "default": 25,
      "configurableInWizard": true
    },
    {
      "name": "access.control.allow.methods",
      "label": "Access Control Allow Methods",
      "description": "Set value to Jetty Access-Control-Allow-Origin header for specified methods.",
      "required": false,
      "type": "string",
      "default": "GET,POST,PUT,OPTIONS,DELETE,HEAD",
      "configurableInWizard": true
    },
    {
      "name": "access.control.allow.origin",
      "label": "Access Control Allow Origin",
      "description": "Set value for Jetty Access-Control-Allow-Origin header.",
      "required": false,
      "type": "string",
      "default": "*",
      "configurableInWizard": true
    },
    {
      "name": "consumer.instance.timeout.ms",
      "label": "Consumer Instance Timeout",
      "description": "Amount of idle time before a consumer instance is automatically destroyed.",
      "required": false,
      "type": "long",
      "default": 300000,
      "unit": "milliseconds",
      "configurableInWizard": true
    },
    {
      "name": "consumer.iterator.backoff.ms",
      "label": "Consumer Iterator Backoff Timeout",
      "description": "Amount of time to backoff when an iterator runs out of data. If a consumer has a dedicated worker thread, this is effectively the maximum error for the entire request timeout. It should be small enough to closely target the timeout, but large enough to avoid busy waiting.",
      "required": false,
      "type": "long",
      "default": 50,
      "unit": "milliseconds",
      "configurableInWizard": true
    },
    {
      "name": "consumer.iterator.timeout.ms",
      "label": "Consumer Iterator Backoff Timeout",
      "description": "Timeout for blocking consumer iterator operations. This should be set to a small enough value that it is possible to effectively peek() on the iterator.",
      "required": false,
      "type": "long",
      "default": 1,
      "unit": "milliseconds",
      "configurableInWizard": true
    },
    {
      "name": "debug",
      "label": "Debug",
      "description": "Boolean indicating whether extra debugging information is generated in some error response entities.",
      "required": false,
      "type": "boolean",
      "default": false,
      "configurableInWizard": true
    },
    {
      "name": "metric.reporters",
      "label": "Metric Reporters",
      "description": "A list of classes to use as metrics reporters. Implementing the <code>MetricReporter</code> interface allows plugging in classes that will be notified of new metric creation. The JmxReporter is always included to register JMX statistics.",
      "required": false,
      "type": "string_array",
      "configurableInWizard": true
    },
    {
      "name": "metrics.jmx.prefix",
      "label": "Metric JMX Prefix",
      "description": "Prefix to apply to metric names for the default JMX reporter.",
      "required": false,
      "type": "string",
      "default": "kafka.rest",
      "configurableInWizard": true
    },
    {
      "name": "metrics.num.samples",
      "label": "Metrics Num Samples",
      "description": "The number of samples maintained to compute metrics.",
      "required": false,
      "type": "long",
      "default": 2,
      "configurableInWizard": true
    },
    {
      "name": "metrics.sample.window.ms",
      "label": "Metrics Sample Window",
      "description": "The metrics system maintains a configurable number of samples over a fixed window size. This configuration controls the size of the window. For example we might maintain two samples each measured over a 30 second period. When a window expires we erase and overwrite the oldest window.",
      "required": false,
      "type": "long",
      "default": 30000,
      "unit": "milliseconds",
      "configurableInWizard": true
    },
    {
      "name": "producer.threads",
      "label": "Producer Threads",
      "description": "Number of threads to run produce requests on.",
      "required": false,
      "type": "long",
      "default": 5,
      "configurableInWizard": true
    },
    {
      "name": "request.logger.name",
      "label": "Request Logger Name",
      "description": "Name of the SLF4J logger to write the NCSA Common Log Format request log.",
      "required": false,
      "type": "string",
      "default": "io.confluent.rest-utils.requests",
      "configurableInWizard": true
    },
    {
      "name": "response.mediatype.default",
      "label": "Request Media Type Default",
      "description": "The default response media type that should be used if no specify types are requested in an Accept header.",
      "required": false,
      "type": "string",
      "default": "application/vnd.kafka.v1+json",
      "configurableInWizard": true
    },
    {
      "name": "response.mediatype.preferred",
      "label": "Request Media Type Preferred",
      "description": "An ordered list of the server’s preferred media types used for responses, from most preferred to least.",
      "required": false,
      "type": "string_array",
      "default": [
        "application/vnd.kafka.v1+json",
        "application/vnd.kafka+json",
        "application/json"
        ],
      "configurableInWizard": true
    },
    {
      "name": "shutdown.graceful.ms",
      "label": "Shutdown Graceful",
      "description": "Amount of time to wait after a shutdown request for outstanding requests to complete.",
      "required": false,
      "type": "long",
      "default": 1000,
      "unit": "milliseconds",
      "configurableInWizard": true
    },
    {
      "name": "simpleconsumer.pool.timeout.ms",
      "label": "Simple Consumer Pool Timeout",
      "description": "Amount of time to wait for an available SimpleConsumer from the pool before failing. Use 0 for no timeoute.",
      "required": false,
      "type": "long",
      "default": 1000,
      "unit": "milliseconds",
      "configurableInWizard": true
    },
    {
      "name": "kafka.rest.resource.extension.class",
      "label": "Simple Consumer Pool Timeout",
      "description": "Fully qualified class name of a valid Implementation of the interface RestResourceExtension. This can be used to inject user defined resources like filters. Typically used to add custom capability like logging, security, etc.",
      "required": false,
      "type": "string",
      "configurableInWizard": true
    },
    {
      "name": "java.heap.size.mb",
      "label": "Java Heap Size",
      "description": "Java Heap Size for Kafka Connect workers",
      "required": false,
      "type": "long",
      "default": 512,
      "unit": "megabytes",
      "configurableInWizard": true
    },
    {
      "name": "ssl.provider",
      "label": "SSL Provider",
      "description": "Used for HTTPS. The SSL security provider name. Leave blank to use Jetty’s default.",
      "required": false,
      "type": "string",
      "configurableInWizard": true
    },
    {
      "name": "ssl.client.auth",
      "label": "SSL Client Auth",
      "description": "Used for HTTPS. Whether or not to require the HTTPS client to authenticate via the server’s trust store.",
      "required": false,
      "type": "boolean",
      "default": false,
      "configurableInWizard": true
    },
    {
      "name": "ssl.keymanager.algorithm",
      "label": "SSL Keymanager Algorithm",
      "description": "Used for HTTPS. The algorithm used by the key manager factory for SSL connections. Leave blank to use Jetty’s default.",
      "required": false,
      "type": "string",
      "configurableInWizard": true
    },
    {
      "name": "ssl.trustmanager.algorithm",
      "label": "SSL Trustmanager Algorithm",
      "description": "Used for HTTPS. The algorithm used by the trust manager factory for SSL connections. Leave blank to use Jetty’s default.",
      "required": false,
      "type": "string",
      "configurableInWizard": true
    },
    {
      "name": "ssl.cipher.suites",
      "label": "SSL Cipher Suites",
      "description": "Used for HTTPS. A list of SSL cipher suites. Comma-separated list. Leave blank to use Jetty’s defaults.",
      "required": false,
      "type": "string_array",
      "configurableInWizard": true
    },
    {
      "name": "ssl.endpoint.identification.algorithm",
      "label": "SSL Endpoint Identification Algorithm",
      "description": "Used for HTTPS. The endpoint identification algorithm to validate the server hostname using the server certificate. Leave blank to use Jetty’s default.",
      "required": false,
      "type": "string",
      "configurableInWizard": true
    },
    {
      "name": "client.security.mode",
      "label": "Client Security Mode",
      "description": "Note that all the SSL ans SASL configurations (for REST Proxy to Broker communication) are prefixed with “client”. If you want the configuration to apply just to consumers or just to producers, you can set the mode to “consumer” or “producer” respectively. In addition to these configurations, for SSL make sure bootstrap.servers configuration is set with SSL://host:port end-points, or you’ll accidentally open an SSL connection to a non-SSL port. For the same reason for SASL make sure bootstrap.servers is set with SASL_PLAINTEXT://host:port or SASL_SSL://host:port. For better understanding security configuration check out the <a href=\"http://docs.confluent.io/current/kafka/security.html\">documentation for Kafka Security</a> and for <a href=\"http://docs.confluent.io/current/schema-registry/docs/security.html\">Schema Registry Security</a>",
      "required": false,
      "type": "string_enum",
      "validValues": [
        "client",
        "consumer",
        "producer"
      ],
      "default": "client",
      "configurableInWizard": true
    },
    {
      "name": "client.ssl.key.password",
      "label": "Client SSL Key Password",
      "description": "The password of the private key in the key store file. This is optional for client.",
      "required": false,
      "type": "password",
      "configurableInWizard": true
    },
    {
      "name": "client.ssl.keystore.location",
      "label": "Client SSL Keystore Location",
      "description": "The location of the key store file. This is optional for client and can be used for two-way authentication for client.",
      "required": false,
      "type": "path",
      "pathType": "localDataFile",
      "configurableInWizard": true
    },
    {
      "name": "client.ssl.keystore.password",
      "label": "Client SSL Keystore Password",
      "description": "The store password for the key store file. This is optional for client and only needed if ssl.keystore.location is configured.",
      "required": false,
      "type": "password",
      "configurableInWizard": true
    },
    {
      "name": "client.ssl.truststore.location",
      "label": "Client SSL Truststore Location",
      "description": "The location of the trust store file.",
      "required": false,
      "type": "path",
      "pathType": "localDataFile",
      "configurableInWizard": true
    },
    {
      "name": "client.ssl.truststore.password",
      "label": "Client SSL Truststore Password",
      "description": "The password for the trust store file.",
      "required": false,
      "type": "password",
      "configurableInWizard": true
    },
    {
      "name": "client.ssl.enabled.protocols",
      "label": "Client SSL Enabled Protocols",
      "description": "The list of protocols enabled for SSL connections.",
      "required": false,
      "type": "string_array",
      "default": [
        "TLSv1.2",
        "TLSv1.1",
        "TLSv1"
        ],
      "configurableInWizard": true
    },
    {
      "name": "client.ssl.protocol",
      "label": "Client SSL Protocol",
      "description": "The SSL protocol used to generate the SSLContext. Default setting is TLS, which is fine for most cases. Allowed values in recent JVMs are TLS, TLSv1.1 and TLSv1.2. SSL, SSLv2 and SSLv3 may be supported in older JVMs, but their usage is discouraged due to known security vulnerabilities.",
      "required": false,
      "type": "string_enum",
      "validValues": [
        "TLS",
        "TLSv1.1",
        "TLSv1.2",
        "SSL",
        "SSLv2",
        "SSLv3"
        ],
      "default": "TLS",
      "configurableInWizard": true
    },
    {
      "name": "client.ssl.provider",
      "label": "Client SSL Provider",
      "description": "The name of the security provider used for SSL connections. Default value is the default security provider of the JVM.",
      "required": false,
      "type": "string",
      "configurableInWizard": true
    },
    {
      "name": "client.ssl.truststore.type",
      "label": "Client SSL Truststore Type",
      "description": "The file format of the trust store file.",
      "required": false,
      "type": "string",
      "default": "JKS",
      "configurableInWizard": true
    },
    {
      "name": "client.ssl.cipher.suites",
      "label": "Client SSL Cipher Suites",
      "description": "A list of cipher suites. This is a named combination of authentication, encryption, MAC and key exchange algorithm used to negotiate the security settings for a network connection using TLS or SSL network protocol. By default all the available cipher suites are supported.",
      "required": false,
      "type": "string_array",
      "configurableInWizard": true
    },
    {
      "name": "client.ssl.endpoint.identification.algorithm",
      "label": "Client SSL Endpoint Identification Algorithm",
      "description": "The endpoint identification algorithm to validate server hostname using server certificate.",
      "required": false,
      "type": "string",
      "configurableInWizard": true
    },
    {
      "name": "client.ssl.keymanager.algorithm",
      "label": "Client SSL Keymanager Algorithm",
      "description": "The algorithm used by key manager factory for SSL connections. Default value is the key manager factory algorithm configured for the Java Virtual Machine.",
      "required": false,
      "type": "string",
      "default": "SunX509",
      "configurableInWizard": true
    },
    {
      "name": "client.ssl.secure.random.implementation",
      "label": "Client SSL Secure Random Implementation",
      "description": "The SecureRandom PRNG implementation to use for SSL cryptography operations.",
      "required": false,
      "type": "string",
      "configurableInWizard": true
    },
    {
      "name": "client.ssl.trustmanager.algorithm",
      "label": "Client SSL Trustmanager Algorithm",
      "description": "The algorithm used by trust manager factory for SSL connections. Default value is the trust manager factory algorithm configured for the Java Virtual Machine.",
      "required": false,
      "type": "string",
      "default": "PKIX",
      "configurableInWizard": true
    },
    {
      "name": "client.sasl.jaas.config",
      "label": "Client SASL JAAS Config",
      "description": "JAAS login context parameters for SASL connections in the format used by JAAS configuration files. JAAS configuration file format is described in Oracle’s documentation (http://docs.oracle.com/javase/8/docs/technotes/guides/security/jgss/tutorials/LoginConfigFile.html). The format for the value is: ‘ (=)*;’",
      "required": false,
      "type": "string",
      "configurableInWizard": true
    },
    {
      "name": "client.sasl.mechanism",
      "label": "Client SASL Mechanism",
      "description": "SASL mechanism used for client connections. This may be any mechanism for which a security provider is available. GSSAPI is the default mechanism.",
      "required": false,
      "type": "string",
      "default": "GSSAPI",
      "configurableInWizard": true
    },
    {
      "name": "client.sasl.kerberos.kinit.cmd",
      "label": "Client SASL Kerneros Kinit Command",
      "description": "Kerberos kinit command path.",
      "required": false,
      "type": "path",
      "pathType": "localDataFile",
      "default": "/usr/bin/kinit",
      "configurableInWizard": true
    },
    {
      "name": "client.sasl.kerberos.min.time.before.relogin",
      "label": "Client SASL Kerneros Minimum Time Before Relogin",
      "description": "Login thread sleep time between refresh attempts.",
      "required": false,
      "type": "long",
      "default": 60000,
      "unit": "milliseconds",
      "configurableInWizard": true
    },
    {
      "name": "client.sasl.kerberos.ticket.renew.jitter",
      "label": "Client SASL Kerberos Ticket Renew Jitter",
      "description": "Percentage of random jitter added to the renewal time.",
      "required": false,
      "type": "double",
      "default": 0.05,
      "unit": "percent",
      "configurableInWizard": true
    },
    {
      "name": "client.sasl.kerberos.ticket.renew.window.factor",
      "label": "Client SASL Kerberos Ticket Renew Window Factor",
      "description": "Login thread will sleep until the specified window factor of time from last refresh to ticket’s expiry has been reached, at which time it will try to renew the ticket.",
      "required": false,
      "type": "double",
      "default": 0.8,
      "unit": "percent",
      "configurableInWizard": true
    },
    {
      "name": "producer.interceptor.classes",
      "label": "Producer Interceptor Classes",
      "description": "Producer interceptor classes.",
      "required": false,
      "type": "string",
      "default": "",
      "configurableInWizard": true
    },
    {
      "name": "consumer.interceptor.classes",
      "label": "Consumer Interceptor Classes",
      "description": "Producer interceptor classes.",
      "required": false,
      "type": "string",
      "default": "",
      "configurableInWizard": true
    }
  ],
  "roles": [
    {
      "name": "KAFKA_REST_SERVER",
      "label": "Kafka REST Proxy",
      "pluralLabel": "Kafka REST Proxies",
      "jvmBased": true,
      "uniqueIdParameters": [
        "id"
      ],
      "startRunner": {
        "program": "scripts/control.sh",
        "args": [
          "start"
        ],
        "environmentVariables": {
          "HOST": "${host}",
          "PORT": "${port}",
          "JAVA_HEAP_SIZE_MB": "${java.heap.size.mb}",
          "SSL_PORT": "${ssl.port}",
          "SSL_ENABLED": "${ssl_enabled}",
          "SSL_KEYSTORE_LOCATION": "${ssl_server_keystore_location}",
          "SSL_KEYSTORE_PASSWORD": "${ssl_server_keystore_password}",
          "SSL_TRUSTSTORE_LOCATION": "${ssl_client_truststore_location}",
          "SSL_TRUSTSTORE_PASSWORD": "${ssl_client_truststore_password}",
          "CLIENT_SECURITY_MODE": "${client.security.mode}",
          "DEBUG": "${debug}"
        }
      },
      "stopRunner" : {
        "timeout" : "30000"
      },
      "kerberosPrincipals" : [
        {
          "name" : "KAFKA_PRINCIPAL",
          "primary" : "kafka",
          "instance" : "${host}"
        }
      ],
      "sslServer": {
        "keyIdentifier" : "kafka-rest",
        "enabledConfigName" : "ssl.enabled",
        "keystoreLocationConfigName" : "ssl.keystore.location",
        "keystorePasswordConfigName" : "ssl.keystore.password",
        "keyPasswordOptionality" : "required",
        "keystoreKeyPasswordConfigName" : "ssl.key.password"
      },
      "sslClient": {
        "truststoreLocationConfigName" : "ssl.truststore.location",
        "truststorePasswordConfigName" : "ssl.truststore.password"
      },
      "logging": {
        "dir": "/var/log/kafka-rest",
        "filename": "kafka-rest-${host}.log",
        "configFilename": "kafka-rest-conf/log4j.properties",
        "modifiable": true,
        "configName": "kafkarest.log.dir",
        "loggingType": "log4j"
      },
      "configWriter": {
        "generators": [
          {
            "filename": "kafka-rest-conf/kafka-rest.properties",
            "configFormat": "properties",
            "excludedParams": [
              "client.security.mode",
              "port",
              "ssl.port",
              "ssl_enabled",
              "ssl_server_keystore_location",
              "ssl_server_keystore_password",
              "ssl_server_keystore_keypassword",
              "ssl_client_truststore_location",
              "ssl_client_truststore_password",
              "ssl.client.auth"
            ],
            "additionalConfigs" : [
              {
                "key" : "#zookeeper.connect",
                "value" : "{{QUORUM}}"
              },
              {
                "key" : "#listeners",
                "value" : "{{LISTENERS}}"
              },
              {
                "key" : "client.security.protocol",
                "value" : "{{SECURITY_PROTOCOL}}"
              },
              {
                "key" : "host.name",
                "value" : "${host}"
              },
              {
                "key" : "schema.registry.url",
                "value" : "{{SCHEMA_REGISTRY_URL}}"
              },
              {
                "key" : "#ssl.configs",
                "value" : "{{SSL_CONFIGS}}"
              },
              {
                "key" : "client.sasl.kerberos.service.name",
                "value" : "kafka"
              }
            ]
          },
          {
            "filename": "kafka-rest-conf/ssl.properties",
            "configFormat": "properties",
            "includedParams": [
              "ssl_server_keystore_location",
              "ssl_server_keystore_password",
              "ssl_server_keystore_keypassword",
              "ssl_client_truststore_location",
              "ssl_client_truststore_password",
              "ssl.client.auth"
            ],
            "additionalConfigs" : [
              {
                "key" : "ssl.protocol",
                "value" : "TLS"
              },
              {
                "key" : "ssl.enabled.protocols",
                "value" : "TLSv1.2,TLSv1.1,TLSv1"
              },
              {
                "key" : "ssl.keystore.type",
                "value" : "JKS"
              },{
                "key" : "ssl.truststore.type",
                "value" : "JKS"
              },
              {
                "key" : "client.ssl.keystore.type",
                "value" : "JKS"
              },
              {
                "key" : "client.ssl.truststore.type",
                "value" : "JKS"
              },
              {
                "key" : "client.ssl.protocol",
                "value" : "TLS"
              }
            ]
          }
        ]
      },
      "parameters": [
        {
          "name": "id",
          "label": "ID",
          "description": "Unique ID for this REST server instance. This is used in generating unique IDs for consumers that do not specify their ID. The ID is empty by default, which makes a single server setup easier to get up and running, but is not safe for multi-server deployments where automatic consumer IDs are used.",
          "type": "string",
          "configurableInWizard": false
        }
      ]
    }
  ],
  "gateway" : {
    "alternatives" : {
      "name" : "kafka-rest-conf",
      "linkRoot" : "/etc/kafka-rest",
      "priority" : 50
    },
    "scriptRunner" : {
      "program" : "scripts/deploy-client-config.sh",
      "args" : [
        "deploy"
        ],
      "environmentVariables": {
      }
    },
    "logging" : {
      "configFilename" : "kafka-rest-conf/client-log4j.properties",
      "loggingType" : "log4j"
    },
    "configWriter" : {
      "generators" : [
        {
          "filename" : "kafka-rest-conf/kafka-rest-client.properties",
          "configFormat" : "properties",
          "includedParams": [
          ]
        }
      ],
      "peerConfigGenerators" : [
        {
          "filename" : "kafka-rest-conf/kafka-rest-hostnames",
          "refreshable" : false,
          "params" : [ "port", "ssl.port", "ssl_enabled" ],
          "roleName" : "KAFKA_REST_SERVER"
        }
      ]
    }
  },
  "rollingRestart": {
    "nonWorkerSteps": [
      {
        "roleName": "KAFKA_REST_SERVER",
        "bringUpCommands": [ "Start" ],
        "bringDownCommands": [ "Stop" ]
      }
    ]
  }
}
