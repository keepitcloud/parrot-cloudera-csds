{
  "name": "SCHEMA_REGISTRY",
  "label": "Schema Registry",
  "description": "This is the Parrot distribution of the Confluent Schema Registry, which provides a serving layer for your metadata. Confluent Schema Registry provides a RESTful interface for storing and retrieving Avro schemas. It stores a versioned history of all schemas, provides multiple compatibility settings and allows evolution of schemas according to the configured compatibility setting. It provides serializers that plug into Kafka clients that handle schema storage and retrieval for Kafka messages that are sent in the Avro format. <span class=\"error\">Before adding this service, ensure that the Parrot Schema Registry parcel is activated.</span>",
  "version": "1.0.0",
  "compatibility": {
    "generation": 1,
    "cdhVersion": {
      "min": "5",
      "max": "5"
    }
  },
  "runAs": {
    "user": "parrot",
    "group": "parrot",
    "principal": "parrot"
  },
  "icon": "images/kafka.png",
  "parcel": {
    "repoUrl": "https://matteocapitanio.com/parrot/schema-registry/parcels/latest/",
    "requiredTags": [
      "schema-registry",
      "kafka"
    ]
  },
  "serviceDependencies": [
    {
      "name": "ZOOKEEPER",
      "required": "true"
    }
  ],
  "inExpressWizard": true,
  "parameters": [
    {
      "name": "port",
      "label": "TCP Port",
      "description": "Schema Registry port",
      "type": "port",
      "default": 8081,
      "configurableInWizard": true
    },
    {
      "name": "avro_compatibility_level",
      "label": "Avro compatibility type",
      "description": "The Avro compatibility type. Valid values are: none (new schema can be any valid Avro schema), backward (new schema can read data produced by latest registered schema), backward_transitive (new schema can read data produced by all previously registered schemas), forward (latest registered schema can read data produced by the new schema), forward_transitive (all previously registered schemas can read data produced by the new schema), full (new schema is backward and forward compatible with latest registered schema), transitive_full (new schema is backward and forward compatible with all previously registered schemas)",
      "configName": "avro.compatibility.level",
      "required": false,
      "type": "string_enum",
      "validValues": [
        "none",
        "backward",
        "backward_transitive",
        "forward",
        "forward_transitive",
        "full",
        "transitive_full"],
      "default": "backward",
      "configurableInWizard": true
    }
  ],
  "roles": [
    {
      "name": "SCHEMA_REGISTRY",
      "label": "Schema Registry",
      "pluralLabel": "Schema Registries",
      "jvmBased": true,
      "startRunner": {
        "program": "scripts/control.sh",
        "args": [
          "start"
        ],
        "environmentVariables": {
          "HOST": "${host}",
          "PORT": "${port}"
        }
      },
      "stopRunner" : {
        "timeout" : "30000"
      },
      "logging": {
        "dir": "/var/log/schema-registry",
        "filename": "schema-registry-${host}.log",
        "modifiable": true,
        "configName": "schema-registry.log.dir",
        "loggingType": "log4j"
      },
      "configWriter": {
        "generators": [
          {
            "filename": "schema-registry.properties",
            "configFormat": "properties",
            "additionalConfigs" : [
              {
                "key" : "#kafkastore.connection.url",
                "value" : "{{QUORUM}}"
              },
              {
                "key" : "#listeners",
                "value" : "{{LISTENERS}}"
              }
            ]
          }
        ]
      }
    }
  ]
}
