{
  "name": "SCHEMA_REGISTRY",
  "label": "Schema Registry",
  "description": "This is the Parrot distribution of the Confluent Schema Registry. The Confluent Schema Registry provides a RESTful interface for storing and retrieving Avro schemas. It stores a versioned history of all schemas, provides multiple compatibility settings and allows evolution of schemas according to the configured compatibility setting. It provides serializers that plug into Kafka clients that handle schema storage and retrieval for Kafka messages that are sent in the Avro format. <span class=\"error\">Before adding this service, ensure that the Parrot parcel of the Confluent Schema Registry is activated.</span>",
  "version": "{{CSD_VERSION}}",
  "compatibility": {
    "generation": 1,
    "cdhVersion": {
      "min": "5",
      "max": "5"
    }
  },
  "runAs": {
    "user": "kafka",
    "group": "kafka",
    "principal": "kafka"
  },
  "icon": "images/parrot.png",
  "parcel": {
    "repoUrl": "http://matteocapitanio.com/parrot/SCHEMA_REGISTRY/parcels/{{PARROT_VERSION}}/",
    "requiredTags": [
      "schema-registry",
      "kafka"
    ]
  },
  "serviceDependencies": [
    {
      "name": "ZOOKEEPER",
      "required": "true"
    },
    {
      "name": "KAFKA",
      "required": "true"
    }
  ],
  "inExpressWizard": true,
  "kerberos" : "${kerberos.auth.enable}",
  "parameters": [
    {
      "name": "port",
      "label": "Port",
      "description": "Port to listen on for new connections.",
      "required": true,
      "type": "port",
      "default": 8081,
      "configurableInWizard": true
    },
    {
      "name": "ssl.port",
      "label": "SSL Port",
      "description": "Port to listen on for new connections when SSL is enabled.",
      "required": true,
      "type": "port",
      "default": 8443,
      "configurableInWizard": true
    },
    {
      "name": "avro.compatibility.level",
      "label": "Avro Compatibility Type",
      "description": "The Avro compatibility type. Valid values are: none (new schema can be any valid Avro schema), backward (new schema can read data produced by latest registered schema), backward_transitive (new schema can read data produced by all previously registered schemas), forward (latest registered schema can read data produced by the new schema), forward_transitive (all previously registered schemas can read data produced by the new schema), full (new schema is backward and forward compatible with latest registered schema), transitive_full (new schema is backward and forward compatible with all previously registered schemas)",
      "required": false,
      "type": "string_enum",
      "validValues": [
        "none",
        "backward",
        "backward_transitive",
        "forward",
        "forward_transitive",
        "full",
        "transitive_full"],
      "default": "backward",
      "configurableInWizard": true
    },
    {
      "name": "kafkastore.topic",
      "label": "Kafkastore Topic",
      "description": "The durable single partition topic that acts as the durable log for the data. This topic must be compacted to avoid losing data due to retention policy.",
      "required": false,
      "type": "string",
      "conformRegex": "^_[a-zA-Z_]+$",
      "default": "_schemas",
      "configurableInWizard": true
    },
    {
      "name": "kafkastore.topic.replication.factor",
      "label": "Kafkastore Topic Replication Factor",
      "description": "The desired replication factor of the schema topic. The actual replication factor will be the smaller of this value and the number of live Kafka brokers.",
      "required": false,
      "type": "long",
      "default": 3,
      "configurableInWizard": true
    },
    {
      "name": "response.mediatype.default",
      "label": "Response Mediatype Default",
      "description": "The default response media type that should be used if no specify types are requested in an Accept header.",
      "required": false,
      "type": "long",
      "default": "3",
      "configurableInWizard": true
    },
    {
      "name": "response.mediatype.preferred",
      "label": "Response Mediatype Preferred",
      "description": "An ordered list of the server’s preferred media types used for responses, from most preferred to least.",
      "required": false,
      "type": "string_array",
      "default": [
        "application/vnd.schemaregistry.v1+json",
        "application/vnd.schemaregistry+json, application/json"
        ],
      "configurableInWizard": true
    },
    {
      "name" : "kerberos.auth.enable",
      "label" : "Enable Kerberos Authentication",
      "description" : "Enable Kerberos authentication for this SCHEMA_REGISTRY service.",
      "type" : "boolean",
      "default" : "false",
      "configurableInWizard": true
    },
    {
      "name": "zookeeper.set.acl",
      "label": "Zookeeper Set ACL",
      "description": "Whether or not to set an ACL in ZooKeeper when znodes are created and ZooKeeper SASL authentication is configured. IMPORTANT: if set to true, the ZooKeeper SASL principal must be the same as the Kafka brokers.",
      "required": false,
      "type": "boolean",
      "default": false,
      "configurableInWizard": true
    },
    {
      "name": "kafkastore.init.timeout.ms",
      "label": "Kafkastore Init Timeout",
      "description": "The timeout for initialization of the Kafka store, including creation of the Kafka topic that stores schema data.",
      "required": false,
      "type": "long",
      "default": 60000,
      "unit": "milliseconds",
      "configurableInWizard": true
    },
    {
      "name": "kafkastore.timeout.ms",
      "label": "Kafkastore Timeout",
      "description": "The timeout for an operation on the Kafka store.",
      "required": false,
      "type": "long",
      "default": 50,
      "unit": "milliseconds",
      "configurableInWizard": true
    },
    {
      "name": "master.eligibility",
      "label": "Master Eligibility",
      "description": "If true, this node can participate in master election. In a multi-colo setup, turn this off for clusters in the slave data center.",
      "required": false,
      "type": "boolean",
      "default": true,
      "configurableInWizard": true
    },    
    {
      "name": "access.control.allow.methods",
      "label": "Access Control Allow Methods",
      "description": "Set value to Jetty Access-Control-Allow-Origin header for specified methods.",
      "required": false,
      "type": "string",
      "default": "GSSAPI,GET,POST,PUT,OPTIONS",
      "configurableInWizard": true
    },
    {
      "name": "access.control.allow.origin",
      "label": "Access Control Allow Origin",
      "description": "Set value for Jetty Access-Control-Allow-Origin header.",
      "required": false,
      "type": "string",
      "default": "*",
      "configurableInWizard": true
    },
    {
      "name": "ssl.provider",
      "label": "SSL Provider",
      "description": "Used for HTTPS. The SSL security provider name. Leave blank to use Jetty’s default.",
      "required": false,
      "type": "string",
      "configurableInWizard": true
    },
    {
      "name": "ssl.client.auth",
      "label": "SSL Client Auth",
      "description": "Used for HTTPS. Whether or not to require the HTTPS client to authenticate via the server’s trust store.",
      "required": false,
      "type": "boolean",
      "default": false,
      "configurableInWizard": true
    },
    {
      "name": "ssl.keymanager.algorithm",
      "label": "SSL Keymanager Algorithm",
      "description": "Used for HTTPS. The algorithm used by the key manager factory for SSL connections. Leave blank to use Jetty’s default.",
      "required": false,
      "type": "string",
      "configurableInWizard": true
    },
    {
      "name": "ssl.trustmanager.algorithm",
      "label": "SSL Trustmanager Algorithm",
      "description": "Used for HTTPS. The algorithm used by the trust manager factory for SSL connections. Leave blank to use Jetty’s default.",
      "required": false,
      "type": "string",
      "configurableInWizard": true
    },
    {
      "name": "ssl.cipher.suites",
      "label": "SSL Cipher Suites",
      "description": "Used for HTTPS. A list of SSL cipher suites. Comma-separated list. Leave blank to use Jetty’s defaults.",
      "required": false,
      "type": "string_array",
      "configurableInWizard": true
    },
    {
      "name": "ssl.endpoint.identification.algorithm",
      "label": "SSL Endpoint Identification Algorithm",
      "description": "Used for HTTPS. The endpoint identification algorithm to validate the server hostname using the server certificate. Leave blank to use Jetty’s default.",
      "required": false,
      "type": "string",
      "configurableInWizard": true
    },
    {
      "name": "kafkastore.bootstrap.servers",
      "label": "Kafkastore Bootstrap Servers",
      "description": "A list of Kafka brokers to connect to. For example,  PLAINTEXT://hostname:9092,SSL://hostname2:9092. If this configuration is not specified, the Schema Registry’s internal Kafka clients will get their Kafka bootstrap server list from ZooKeeper (configured with kafkastore.connection.url). Note that if kafkastore.bootstrap.servers is configured, kafkastore.connection.url still needs to be configured, too. This configuration is particularly important when Kafka security is enabled, because Kafka may expose multiple endpoints that all will be stored in ZooKeeper, but the Schema Registry may need to be configured with just one of those endpoints.",
      "required": false,
      "type": "string_array",
      "configurableInWizard": true
    },
    {
      "name": "debug",
      "label": "Debug",
      "description": "Boolean indicating whether extra debugging information is generated in some error response entities.",
      "required": false,
      "type": "boolean",
      "default": false,
      "configurableInWizard": true
    },
    {
      "name": "kafkastore.zk.session.timeout.ms",
      "label": "Kafkastore ZooKeeper Session Timeout",
      "description": "The algorithm used by the trust manager factory for SSL connections.",
      "required": false,
      "type": "long",
      "default": 30000,
      "unit": "milliseconds",
      "configurableInWizard": true
    },
    {
      "name": "metric.reporters",
      "label": "Metric Reporters",
      "description": "A list of classes to use as metrics reporters. Implementing the <code>MetricReporter</code> interface allows plugging in classes that will be notified of new metric creation. The JmxReporter is always included to register JMX statistics.",
      "required": false,
      "type": "string_array",
      "default": [],
      "configurableInWizard": true
    },
    {
      "name": "metrics.jmx.prefix",
      "label": "Metrics JMX Prefix",
      "description": "Prefix to apply to metric names for the default JMX reporter.",
      "required": false,
      "type": "string",
      "default": "kafka.schema.registry",
      "configurableInWizard": true
    },
    {
      "name": "metrics.num.samples",
      "label": "Metrics Number of Samples",
      "description": "Prefix to apply to metric names for the default JMX reporter.",
      "required": false,
      "type": "long",
      "default": 2,
      "configurableInWizard": true
    },
    {
      "name": "metrics.sample.window.ms",
      "label": "Metrics Sample Window",
      "description": "The metrics system maintains a configurable number of samples over a fixed window size. This configuration controls the size of the window. For example we might maintain two samples each measured over a 30 second period. When a window expires we erase and overwrite the oldest window.",
      "required": false,
      "type": "long",
      "default": 30000,
      "unit": "milliseconds",
      "configurableInWizard": true
    },
    {
      "name": "request.logger.name",
      "label": "Request Logger Name",
      "description": "Name of the SLF4J logger to write the NCSA Common Log Format request log.",
      "required": false,
      "type": "string",
      "default": "io.confluent.rest-utils.requests",
      "configurableInWizard": true
    },
    {
      "name": "schema.registry.zk.namespace",
      "label": "Schema Registry ZooKeeper Namespace",
      "description": "The string that is used as the zookeeper namespace for storing schema registry metadata. SchemaRegistry instances which are part of the same schema registry service should have the same ZooKeeper namespace.",
      "required": false,
      "type": "string",
      "default": "schema_registry",
      "configurableInWizard": true
    },
    {
      "name": "shutdown.graceful.ms",
      "label": "Shutdown Graceful",
      "description": "Amount of time to wait after a shutdown request for outstanding requests to complete.",
      "required": false,
      "type": "long",
      "default": 1000,
      "unit": "milliseconds",
      "configurableInWizard": true
    },
    {
      "name": "kafkastore.security.protocol",
      "label": "Kafkastore Security Protocol",
      "description": "The security protocol to use when connecting with Kafka, the underlying persistent storage. Values can be PLAINTEXT, SASL_PLAINTEXT, SSL or SASL_SSL.",
      "required": false,
      "type": "string_enum",
      "validValues": [
        "PLAINTEXT",
        "SSL",
        "SASL_PLAINTEXT",
        "SASL_SSL"
        ],
      "default": "PLAINTEXT",
      "configurableInWizard": true
    },
    {
      "name": "kafkastore.ssl.keystore.location",
      "label": "Kafkastore SSL Keystore Location",
      "description": "The location of the SSL keystore file.",
      "required": false,
      "type": "path",
      "pathType": "localDataFile",
      "configurableInWizard": true
    },
    {
      "name": "kafkastore.ssl.keystore.password",
      "label": "Kafkastore SSL Keystore Password",
      "description": "The password to access the keystore.",
      "required": false,
      "type": "password",
      "configurableInWizard": true
    },
    {
      "name": "kafkastore.ssl.key.password",
      "label": "Kafkastore SSL Key Password",
      "description": "The password of the key contained in the keystore.",
      "required": false,
      "type": "password",
      "configurableInWizard": true
    },
    {
      "name": "kafkastore.ssl.truststore.location",
      "label": "Kafkastore SSL Truststore Location",
      "description": "The location of the SSL trust store file.",
      "required": false,
      "type": "path",
      "pathType": "localDataFile",
      "configurableInWizard": true
    },
    {
      "name": "kafkastore.ssl.truststore.password",
      "label": "Kafkastore SSL Truststore Password",
      "description": "The password to access the trust store.",
      "required": false,
      "type": "password",
      "configurableInWizard": true
    },
    {
      "name": "kafkastore.ssl.cipher.suites",
      "label": "Kafkastore SSL Cipher Suites",
      "description": "A list of cipher suites used for SSL.",
      "required": false,
      "type": "string",
      "configurableInWizard": true
    },
    {
      "name": "kafkastore.ssl.endpoint.identification.algorithm",
      "label": "Kafkastore SSL Endpoint Identification Algorithm",
      "description": "A list of cipher suites used for SSL.",
      "required": false,
      "type": "string",
      "configurableInWizard": true
    },
    {
      "name": "kafkastore.ssl.keymanager.algorithm",
      "label": "Kafkastore SSL Keymanager Algorithm",
      "description": "The algorithm used by key manager factory for SSL connections.",
      "required": false,
      "type": "string",
      "default": "",
      "configurableInWizard": true
    },
    {
      "name": "kafkastore.ssl.trustmanager.algorithm",
      "label": "Kafkastore SSL Trustmanager Algorithm",
      "description": "The algorithm used by the trust manager factory for SSL connections.",
      "required": false,
      "type": "string",
      "default": "PKIX",
      "configurableInWizard": true
    },
    {
      "name": "kafkastore.ssl.enabled.protocols",
      "label": "Kafkastore SSL Enabled Protocols",
      "description": "Protocols enabled for SSL connections.",
      "required": false,
      "type": "string",
      "default": "TLSv1.2,TLSv1.1,TLSv1",
      "configurableInWizard": true
    },
    {
      "name": "kafkastore.ssl.keystore.type",
      "label": "Kafkastore SSL Keystore Type",
      "description": "The file format of the keystore.",
      "required": false,
      "type": "string",
      "default": "JKS",
      "configurableInWizard": true
    },
    {
      "name": "kafkastore.ssl.provider",
      "label": "Kafkastore SSL Provider",
      "description": "The name of the security provider used for SSL.",
      "required": false,
      "type": "string",
      "configurableInWizard": true
    },
    {
      "name": "kafkastore.sasl.mechanism",
      "label": "Kafkastore SASL Mechanism",
      "description": "The SASL mechanism used for Kafka connections. GSSAPI is the default.",
      "required": false,
      "type": "string",
      "default": "GSSAPI",
      "configurableInWizard": true
    },
    {
      "name": "kafkastore.sasl.kerberos.kinit.cmd",
      "label": "Kafkastore SASL Kerberos Kinit Command Path",
      "description": "The Kerberos kinit command path.",
      "required": false,
      "type": "path",
      "pathType": "localDataFile",
      "default": "/usr/bin/kinit",
      "configurableInWizard": true
    },
    {
      "name": "kafkastore.sasl.kerberos.min.time.before.relogin",
      "label": "Kafkastore SASL Kerberos Minimum Time Before Relogin",
      "description": "The login time between refresh attempts.",
      "required": false,
      "type": "long",
      "default": 60000,
      "unit": "milliseconds",
      "configurableInWizard": true
    },
    {
      "name": "kafkastore.sasl.kerberos.ticket.renew.jitter",
      "label": "Kafkastore SASL Kerberos Ticket Renew Jitter",
      "description": "The percentage of random jitter added to the renewal time.",
      "required": false,
      "type": "double",
      "default": 0.05,
      "unit": "percent",
      "configurableInWizard": true
    },
    {
      "name": "kafkastore.sasl.kerberos.ticket.renew.window.factor",
      "label": "Kafkastore SASL Kerberos Ticket Renew Window Factor",
      "description": "Login thread will sleep until the specified window factor of time from last refresh to ticket’s expiry has been reached, at which time it will try to renew the ticket.",
      "required": false,
      "type": "double",
      "default": 0.8,
      "unit": "percent",
      "configurableInWizard": true
    }
  ],
  "roles": [
    {
      "name": "SCHEMA_REGISTRY_SERVER",
      "label": "Schema Registry",
      "pluralLabel": "Schema Registries",
      "jvmBased": true,
      "startRunner": {
        "program": "scripts/control.sh",
        "args": [
          "start"
        ],
        "environmentVariables": {
          "HOST": "${host}",
          "PORT": "${port}",
          "SSL_PORT": "${ssl.port}",
          "SSL_ENABLED": "${ssl_enabled}",
          "SSL_KEYSTORE_LOCATION": "${ssl_server_keystore_location}",
          "SSL_KEYSTORE_PASSWORD": "${ssl_server_keystore_password}",
          "SSL_TRUSTSTORE_LOCATION": "${ssl_client_truststore_location}",
          "SSL_TRUSTSTORE_PASSWORD": "${ssl_client_truststore_password}",
          "KERBEROS_AUTH_ENABLED": "${kerberos.auth.enable}",
          "DEBUG": "${debug}"
        }
      },
      "stopRunner" : {
        "timeout" : "30000"
      },
      "kerberosPrincipals" : [
        {
          "name" : "KAFKA_PRINCIPAL",
          "primary" : "kafka",
          "instance" : "${host}"
        }
      ],
      "logging": {
        "dir": "/var/log/schema-registry",
        "filename": "schema-registry-${host}.log",
        "modifiable": true,
        "configName": "schema-registry.log.dir",
        "loggingType": "log4j"
      },
      "sslServer": {
        "keyIdentifier" : "schema-registry",
        "keystoreFormat": "jks",
        "enabledConfigName" : "ssl.enabled",
        "keystoreLocationConfigName" : "ssl.keystore.location",
        "keystorePasswordConfigName" : "ssl.keystore.password",
        "keystorePasswordCredentialProviderCompatible" : false,
        "keystorePasswordScriptBased" : false,
        "keyPasswordOptionality" : "required",
        "keystoreKeyPasswordConfigName" : "ssl.key.password",
        "keystoreKeyPasswordScriptBased" : false
      },
      "sslClient": {
        "truststoreFormat": "jks",
        "truststoreLocationConfigName" : "ssl.truststore.location",
        "truststorePasswordConfigName" : "ssl.truststore.password",
        "truststorePasswordScriptBased" : false
      },
      "configWriter": {
        "generators": [
          {
            "filename": "schema-registry-conf/schema-registry.properties",
            "configFormat": "properties",
            "excludedParams": [
              "port",
              "ssl.port",
              "ssl_enabled",
              "ssl_server_keystore_location",
              "ssl_client_truststore_location",
              "ssl_server_keystore_password",
              "ssl_server_keystore_keypassword",
              "ssl_client_truststore_password",
              "ssl.client.auth"
            ],
            "additionalConfigs" : [
              {
                "key" : "#kafkastore.connection.url",
                "value" : "{{QUORUM}}"
              },
              {
                "key" : "#listeners",
                "value" : "{{LISTENERS}}"
              },
              {
                "key" : "#authentication.realm",
                "value" : "{{REALM}}"
              },          
              {
                "key" : "#ssl.configs",
                "value" : "{{SSL_CONFIGS}}"
              },
              {
                "key" : "host.name",
                "value" : "${host}"
              },
              {
                "key" : "kafkastore.sasl.kerberos.service.name",
                "value" : "kafka"
              }              
            ]
          },
          {
            "filename": "ssl.properties",
            "configFormat": "properties",
            "includedParams": [
              "ssl_server_keystore_location",
              "ssl_server_keystore_password",
              "ssl_server_keystore_keypassword",
              "ssl_client_truststore_location",
              "ssl_client_truststore_password",
              "ssl.client.auth"
            ],
            "additionalConfigs" : [
              {
                "key" : "ssl.protocol",
                "value" : "TLS"
              },
              {
                "key" : "ssl.enabled.protocols",
                "value" : "TLSv1.2,TLSv1.1,TLSv1"
              },
              {
                "key" : "ssl.keystore.type",
                "value" : "JKS"
              },{
                "key" : "ssl.truststore.type",
                "value" : "JKS"
              },
              {
                "key" : "kafkastore.ssl.keystore.type",
                "value" : "JKS"
              },
              {
                "key" : "kafkastore.ssl.truststore.type",
                "value" : "JKS"
              },
              {
                "key" : "kafkastore.ssl.protocol",
                "value" : "TLS"
              }
            ]
          }
        ]
      }
    }
  ],
  "gateway" : {
    "alternatives" : {
      "name" : "schema-registry-conf",
      "linkRoot" : "/etc/schema-registry",
      "priority" : 50
    },
    "scriptRunner" : {
      "program" : "scripts/deploy-client-config.sh",
      "args" : [
        "deploy"
        ],
      "environmentVariables": {
      }
    },
    "logging" : {
      "configFilename" : "schema-registry-conf/client-log4j.properties",
      "loggingType" : "log4j"
    },
    "configWriter" : {
      "generators" : [
        {
          "filename" : "schema-registry-conf/schema-registry-client.properties",
          "configFormat" : "properties",
          "includedParams": [
          ]
        }
      ],
      "peerConfigGenerators" : [
        {
          "filename" : "schema-registry-conf/schema-registry-hostnames",
          "refreshable" : false,
          "params" : [ "port", "ssl.port", "ssl_enabled" ],
          "roleName" : "SCHEMA_REGISTRY_SERVER"
        }
      ]
    }
  }
}
