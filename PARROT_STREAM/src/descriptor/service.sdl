{
  "name": "PARROT_STREAM",
  "label": "Parrot Stream",
  "description": "Parrot Stream is a distribution of the Confluent Kafka Connect and a packaged number of connectors (Confluent, Debezium, DataMounteneer, Parrot and other Confluent certified and open source ones). <span class=\"error\">Before adding this service, ensure that the Parrot parcel of the Parrot Stream is distributed and activated.</span>",
  "version": "{{CSD_VERSION}}",
  "compatibility": {
    "generation": 1,
    "cdhVersion": {
      "min": "5",
      "max": "5"
    }
  },
  "runAs": {
    "user": "parrot",
    "group": "parrot",
    "principal": "parrot"
  },
  "icon": "images/parrot.png",
  "parcel": {
    "repoUrl": "http://matteocapitanio.com/parrot/PARROT_STREAM/parcels/{{PARROT_VERSION}}/",
    "requiredTags": [
      "kafka-rest",
      "kafka",
      "parrot-stream",
      "schema-registry"
    ]
  },
  "serviceDependencies": [
    {
      "name": "KAFKA",
      "required": "true"
    },
    {
      "name": "SCHEMA_REGISTRY",
      "required": "true"
    }
  ],
  "inExpressWizard": true,
  "parameters": [
    {
      "name": "rest.advertised.host.name",
      "label": "REST Advertised Port",
      "description": "If this is set, this is the hostname that will be given out to other workers to connect to.",
      "required": false,
      "type": "port",
      "configurableInWizard": true
    },
    {
      "name": "rest.advertised.port",
      "label": "REST Advertised Port",
      "description": "If this is set, this is the port that will be given out to other workers to connect to.",
      "required": false,
      "type": "port",
      "configurableInWizard": true
    },
    {
      "name": "rest.port",
      "label": "REST Port",
      "description": "Port for the REST API to listen on.",
      "required": true,
      "type": "port",
      "default": 8083,
      "configurableInWizard": true
    },
    {
      "name": "bootstrap.servers",
      "label": "Bootstrap Servers",
      "description": "A list of host/port pairs to use for establishing the initial connection to the Kafka cluster. The client will make use of all servers irrespective of which servers are specified here for bootstrapping: this list only impacts the initial hosts used to discover the full set of servers. This list should be in the form host1:port1,host2:port2,.... Since these servers are just used for the initial connection to discover the full cluster membership (which may change dynamically), this list need not contain the full set of servers (you may want more than one, though, in case a server is down).",
      "required": true,
      "type": "string_array",
      "default": [
        "localhost:9092"
        ],
      "configurableInWizard": true
    },
    {
      "name": "key.converter",
      "label": "Key Converter",
      "description": "Converter class for key Connect data. This controls the format of the data that will be written to Kafka for source connectors or read from Kafka for sink connectors. Popular formats include Avro and JSON.",
      "required": false,
      "type": "string",
      "default": "io.confluent.connect.avro.AvroConverter",
      "configurableInWizard": true
    },
    {
      "name": "key.converter.schema.registry.url",
      "label": "Key Converter Schema Registry URL",
      "description": "URL of the Schema Registry.",
      "required": false,
      "type": "uri",
      "default": "http://localhost:8081",
      "configurableInWizard": true
    },
    {
      "name": "value.converter",
      "label": "Value Converter",
      "description": "Converter class for value Connect data. This controls the format of the data that will be written to Kafka for source connectors or read from Kafka for sink connectors. Popular formats include Avro and JSON.",
      "required": false,
      "type": "string",
      "default": "io.confluent.connect.avro.AvroConverter",
      "configurableInWizard": true
    },
    {
      "name": "value.converter.schema.registry.url",
      "label": "Value Converter Schema Registry URL",
      "description": "URL of the Schema Registry.",
      "required": false,
      "type": "uri",
      "default": "http://localhost:8081",
      "configurableInWizard": true
    },
    {
      "name": "internal.key.converter",
      "label": "Internal Key Converter",
      "description": "Converter class for internal key Connect data that implements the Converter interface. Used for converting data like offsets and configs.",
      "required": false,
      "type": "string",
      "default": "org.apache.kafka.connect.json.JsonConverter",
      "configurableInWizard": true
    },
    {
      "name": "internal.value.converter",
      "label": "Internal Value Converter",
      "description": "Converter class for offset value Connect data that implements the Converter interface. Used for converting data like offsets and configs.",
      "required": false,
      "type": "string",
      "default": "org.apache.kafka.connect.json.JsonConverter",
      "configurableInWizard": true
    },
    {
      "name": "offset.flush.interval.ms",
      "label": "Offset Flush Interval",
      "description": "Interval at which to try committing offsets for tasks.",
      "required": false,
      "type": "long",
      "default": 60000,
      "unit": "milliseconds",
      "configurableInWizard": true
    },
    {
      "name": "offset.flush.timeout.ms",
      "label": "Offset Flush Timeout",
      "description": "Maximum number of milliseconds to wait for records to flush and partition offset data to be committed to offset storage before cancelling the process and restoring the offset data to be committed in a future attempt.",
      "required": false,
      "type": "long",
      "default": 5000,
      "unit": "milliseconds",
      "configurableInWizard": true
    },
    {
      "name": "task.shutdown.graceful.timeout.ms",
      "label": "Task Shutdown Graceful Timeout Request Timeout",
      "description": "Amount of time to wait for tasks to shutdown gracefully. This is the total amount of time, not per task. All task have shutdown triggered, then they are waited on sequentially.",
      "required": false,
      "type": "long",
      "default": 5000,
      "unit": "milliseconds",
      "configurableInWizard": true
    },
    {
      "name": "consumer.threads",
      "label": "Consumer Threads",
      "description": "Number of threads to run consumer requests on.",
      "required": false,
      "type": "long",
      "default": 1,
      "configurableInWizard": true
    },
    {
      "name": "host.name",
      "label": "Hostname",
      "description": "The host name used to generate absolute URLs in responses. If empty, the default canonical hostname is used.",
      "required": false,
      "type": "string",
      "configurableInWizard": true
    },
    {
      "name": "simpleconsumer.pool.size.max",
      "label": "Simpleconsumer Pool Size Max",
      "description": "Maximum number of SimpleConsumers that can be instantiated per broker. If 0, then the pool size is not limited.",
      "required": false,
      "type": "long",
      "default": 25,
      "configurableInWizard": true
    },
    {
      "name": "access.control.allow.methods",
      "label": "Access Control Allow Methods",
      "description": "Set value to Jetty Access-Control-Allow-Origin header for specified methods.",
      "required": false,
      "type": "string",
      "configurableInWizard": true
    },
    {
      "name": "access.control.allow.origin",
      "label": "Access Control Allow Origin",
      "description": "Set value for Jetty Access-Control-Allow-Origin header.",
      "required": false,
      "type": "string",
      "configurableInWizard": true
    },
    {
      "name": "consumer.instance.timeout.ms",
      "label": "Consumer Instance Timeout",
      "description": "Amount of idle time before a consumer instance is automatically destroyed.",
      "required": false,
      "type": "long",
      "default": 300000,
      "unit": "milliseconds",
      "configurableInWizard": true
    },
    {
      "name": "consumer.iterator.backoff.ms",
      "label": "Consumer Iterator Backoff Timeout",
      "description": "Amount of time to backoff when an iterator runs out of data. If a consumer has a dedicated worker thread, this is effectively the maximum error for the entire request timeout. It should be small enough to closely target the timeout, but large enough to avoid busy waiting.",
      "required": false,
      "type": "long",
      "default": 50,
      "unit": "milliseconds",
      "configurableInWizard": true
    },
    {
      "name": "consumer.iterator.timeout.ms",
      "label": "Consumer Iterator Backoff Timeout",
      "description": "Timeout for blocking consumer iterator operations. This should be set to a small enough value that it is possible to effectively peek() on the iterator.",
      "required": false,
      "type": "long",
      "default": 1,
      "unit": "milliseconds",
      "configurableInWizard": true
    },
    {
      "name": "debug",
      "label": "Debug",
      "description": "Boolean indicating whether extra debugging information is generated in some error response entities.",
      "required": false,
      "type": "boolean",
      "default": false,
      "configurableInWizard": true
    },
    {
      "name": "metric.reporters",
      "label": "Metric Reporters",
      "description": "A list of classes to use as metrics reporters. Implementing the <code>MetricReporter</code> interface allows plugging in classes that will be notified of new metric creation. The JmxReporter is always included to register JMX statistics.",
      "required": false,
      "type": "string_array",
      "configurableInWizard": true
    },
    {
      "name": "metrics.jmx.prefix",
      "label": "Metric JMX Prefix",
      "description": "Prefix to apply to metric names for the default JMX reporter.",
      "required": false,
      "type": "string",
      "default": "kafka.rest",
      "configurableInWizard": true
    },
    {
      "name": "metrics.num.samples",
      "label": "Metrics Num Samples",
      "description": "The number of samples maintained to compute metrics.",
      "required": false,
      "type": "long",
      "default": 2,
      "configurableInWizard": true
    },
    {
      "name": "metrics.sample.window.ms",
      "label": "Metrics Sample Window",
      "description": "The metrics system maintains a configurable number of samples over a fixed window size. This configuration controls the size of the window. For example we might maintain two samples each measured over a 30 second period. When a window expires we erase and overwrite the oldest window.",
      "required": false,
      "type": "long",
      "default": 30000,
      "unit": "milliseconds",
      "configurableInWizard": true
    },
    {
      "name": "producer.threads",
      "label": "Producer Threads",
      "description": "Number of threads to run produce requests on.",
      "required": false,
      "type": "long",
      "default": 5,
      "configurableInWizard": true
    },
    {
      "name": "request.logger.name",
      "label": "Request Logger Name",
      "description": "Name of the SLF4J logger to write the NCSA Common Log Format request log.",
      "required": false,
      "type": "string",
      "default": "io.confluent.rest-utils.requests",
      "configurableInWizard": true
    },
    {
      "name": "response.mediatype.default",
      "label": "Request Media Type Default",
      "description": "The default response media type that should be used if no specify types are requested in an Accept header.",
      "required": false,
      "type": "string",
      "default": "application/vnd.kafka.v1+json",
      "configurableInWizard": true
    },
    {
      "name": "response.mediatype.preferred",
      "label": "Request Media Type Preferred",
      "description": "An ordered list of the server’s preferred media types used for responses, from most preferred to least.",
      "required": false,
      "type": "string_array",
      "default": [
        "application/vnd.kafka.v1+json",
        "application/vnd.kafka+json",
        "application/json"
        ],
      "configurableInWizard": true
    },
    {
      "name": "shutdown.graceful.ms",
      "label": "Shutdown Graceful",
      "description": "Amount of time to wait after a shutdown request for outstanding requests to complete.",
      "required": false,
      "type": "long",
      "default": 1000,
      "unit": "milliseconds",
      "configurableInWizard": true
    },
    {
      "name": "simpleconsumer.pool.timeout.ms",
      "label": "Simple Consumer Pool Timeout",
      "description": "Amount of time to wait for an available SimpleConsumer from the pool before failing. Use 0 for no timeoute.",
      "required": false,
      "type": "long",
      "default": 1000,
      "unit": "milliseconds",
      "configurableInWizard": true
    },
    {
      "name": "kafka.rest.resource.extension.class",
      "label": "Simple Consumer Pool Timeout",
      "description": "Fully qualified class name of a valid Implementation of the interface RestResourceExtension. This can be used to inject user defined resources like filters. Typically used to add custom capability like logging, security, etc.",
      "required": false,
      "type": "string",
      "configurableInWizard": true
    },
    {
      "name": "ssl.protocol",
      "label": "SSL Protocol",
      "description": "Used for HTTPS. The SSL protocol used to generate the SslContextFactory.",
      "required": false,
      "type": "string",
      "default": "TLS",
      "configurableInWizard": true
    },
    {
      "name": "ssl.provider",
      "label": "SSL Provider",
      "description": "Used for HTTPS. The SSL security provider name. Leave blank to use Jetty’s default.",
      "required": false,
      "type": "string",
      "configurableInWizard": true
    },
    {
      "name": "ssl.client.auth",
      "label": "SSL Client Auth",
      "description": "Used for HTTPS. Whether or not to require the HTTPS client to authenticate via the server’s trust store.",
      "required": false,
      "type": "boolean",
      "default": false,
      "configurableInWizard": true
    },
    {
      "name": "ssl.enabled.protocols",
      "label": "SSL Enabled Protocols",
      "description": "Used for HTTPS. The list of protocols enabled for SSL connections. Comma-separated list. Leave blank to use Jetty’s defaults.",
      "required": false,
      "type": "string_array",
      "configurableInWizard": true
    },
    {
      "name": "ssl.keymanager.algorithm",
      "label": "SSL Keymanager Algorithm",
      "description": "Used for HTTPS. The algorithm used by the key manager factory for SSL connections. Leave blank to use Jetty’s default.",
      "required": false,
      "type": "string",
      "configurableInWizard": true
    },
    {
      "name": "ssl.trustmanager.algorithm",
      "label": "SSL Trustmanager Algorithm",
      "description": "Used for HTTPS. The algorithm used by the trust manager factory for SSL connections. Leave blank to use Jetty’s default.",
      "required": false,
      "type": "string",
      "configurableInWizard": true
    },
    {
      "name": "ssl.cipher.suites",
      "label": "SSL Cipher Suites",
      "description": "Used for HTTPS. A list of SSL cipher suites. Comma-separated list. Leave blank to use Jetty’s defaults.",
      "required": false,
      "type": "string_array",
      "configurableInWizard": true
    },
    {
      "name": "ssl.endpoint.identification.algorithm",
      "label": "SSL Endpoint Identification Algorithm",
      "description": "Used for HTTPS. The endpoint identification algorithm to validate the server hostname using the server certificate. Leave blank to use Jetty’s default.",
      "required": false,
      "type": "string",
      "configurableInWizard": true
    },
    {
      "name": "security.protocol.mode",
      "label": "Security Protocol Mode",
      "description": "Note that all the SSL ans SASL configurations (for REST Proxy to Broker communication) are prefixed with “client”. If you want the configuration to apply just to consumers or just to producers, you can set the mode to “consumer” or “producer” respectively. In addition to these configurations, for SSL make sure bootstrap.servers configuration is set with SSL://host:port end-points, or you’ll accidentally open an SSL connection to a non-SSL port. For the same reason for SASL make sure bootstrap.servers is set with SASL_PLAINTEXT://host:port or SASL_SSL://host:port. For better understanding security configuration check out the documentation for Kafka Security (http://docs.confluent.io/current/kafka/security.html) and for Schema Registry Security (http://docs.confluent.io/current/schema-registry/docs/security.html)",
      "required": false,
      "type": "string_enum",
      "validValues": [
        "client",
        "consumer",
        "producer"
      ],
      "default": "client",
      "configurableInWizard": true
    },
    {
      "name": "client.security.protocol",
      "label": "Client Security Protocol",
      "description": "Protocol used to communicate with brokers. Valid values are: PLAINTEXT, SSL, SASL_PLAINTEXT, SASL_SSL.",
      "required": false,
      "type": "string_enum",
      "validValues": [
        "PLAINTEXT",
        "SSL",
        "SASL_PLAINTEXT",
        "SASL_SSL"],
      "default": "PLAINTEXT",
      "configurableInWizard": true
    },
    {
      "name": "client.ssl.key.password",
      "label": "Client SSL Key Password",
      "description": "The password of the private key in the key store file. This is optional for client.",
      "required": false,
      "type": "password",
      "configurableInWizard": true
    },
    {
      "name": "client.ssl.keystore.location",
      "label": "Client SSL Keystore Location",
      "description": "The location of the key store file. This is optional for client and can be used for two-way authentication for client.",
      "required": false,
      "type": "path",
      "pathType": "localDataFile",
      "configurableInWizard": true
    },
    {
      "name": "client.ssl.keystore.password",
      "label": "Client SSL Keystore Password",
      "description": "The store password for the key store file. This is optional for client and only needed if ssl.keystore.location is configured.",
      "required": false,
      "type": "password",
      "configurableInWizard": true
    },
    {
      "name": "client.ssl.truststore.location",
      "label": "Client SSL Truststore Location",
      "description": "The location of the trust store file.",
      "required": false,
      "type": "path",
      "pathType": "localDataFile",
      "configurableInWizard": true
    },
    {
      "name": "client.ssl.truststore.password",
      "label": "Client SSL Truststore Password",
      "description": "The password for the trust store file.",
      "required": false,
      "type": "password",
      "configurableInWizard": true
    },
    {
      "name": "client.ssl.enabled.protocols",
      "label": "Client SSL Enabled Protocols",
      "description": "The list of protocols enabled for SSL connections.",
      "required": false,
      "type": "string_array",
      "default": [
        "TLSv1.2",
        "TLSv1.1",
        "TLSv1"
        ],
      "configurableInWizard": true
    },
    {
      "name": "client.ssl.keystore.type",
      "label": "Client SSL Keystore Type",
      "description": "The file format of the key store file. This is optional for client.",
      "required": false,
      "type": "string",
      "default": "JKS",
      "configurableInWizard": true
    },
    {
      "name": "client.ssl.protocol",
      "label": "Client SSL Protocol",
      "description": "The SSL protocol used to generate the SSLContext. Default setting is TLS, which is fine for most cases. Allowed values in recent JVMs are TLS, TLSv1.1 and TLSv1.2. SSL, SSLv2 and SSLv3 may be supported in older JVMs, but their usage is discouraged due to known security vulnerabilities.",
      "required": false,
      "type": "string_enum",
      "validValues": [
        "TLS",
        "TLSv1.1",
        "TLSv1.2",
        "SSL",
        "SSLv2",
        "SSLv3"
        ],
      "default": "TLS",
      "configurableInWizard": true
    },
    {
      "name": "client.ssl.provider",
      "label": "Client SSL Provider",
      "description": "The name of the security provider used for SSL connections. Default value is the default security provider of the JVM.",
      "required": false,
      "type": "string",
      "configurableInWizard": true
    },
    {
      "name": "client.ssl.truststore.type",
      "label": "Client SSL Truststore Type",
      "description": "The file format of the trust store file.",
      "required": false,
      "type": "string",
      "default": "JKS",
      "configurableInWizard": true
    },
    {
      "name": "client.ssl.cipher.suites",
      "label": "Client SSL Cipher Suites",
      "description": "A list of cipher suites. This is a named combination of authentication, encryption, MAC and key exchange algorithm used to negotiate the security settings for a network connection using TLS or SSL network protocol. By default all the available cipher suites are supported.",
      "required": false,
      "type": "string_array",
      "configurableInWizard": true
    },
    {
      "name": "client.ssl.endpoint.identification.algorithm",
      "label": "Client SSL Endpoint Identification Algorithm",
      "description": "The endpoint identification algorithm to validate server hostname using server certificate.",
      "required": false,
      "type": "string",
      "configurableInWizard": true
    },
    {
      "name": "client.ssl.keymanager.algorithm",
      "label": "Client SSL Keymanager Algorithm",
      "description": "The algorithm used by key manager factory for SSL connections. Default value is the key manager factory algorithm configured for the Java Virtual Machine.",
      "required": false,
      "type": "string",
      "default": "SunX509",
      "configurableInWizard": true
    },
    {
      "name": "client.ssl.secure.random.implementation",
      "label": "Client SSL Secure Random Implementation",
      "description": "The SecureRandom PRNG implementation to use for SSL cryptography operations.",
      "required": false,
      "type": "string",
      "configurableInWizard": true
    },
    {
      "name": "client.ssl.trustmanager.algorithm",
      "label": "Client SSL Trustmanager Algorithm",
      "description": "The algorithm used by trust manager factory for SSL connections. Default value is the trust manager factory algorithm configured for the Java Virtual Machine.",
      "required": false,
      "type": "string",
      "default": "PKIX",
      "configurableInWizard": true
    },
    {
      "name": "client.sasl.jaas.config",
      "label": "Client SASL JAAS Config",
      "description": "JAAS login context parameters for SASL connections in the format used by JAAS configuration files. JAAS configuration file format is described in Oracle’s documentation (http://docs.oracle.com/javase/8/docs/technotes/guides/security/jgss/tutorials/LoginConfigFile.html). The format for the value is: ‘ (=)*;’",
      "required": false,
      "type": "string",
      "configurableInWizard": true
    },
    {
      "name": "client.sasl.kerberos.service.name",
      "label": "Client SASL Kerberos Service Name",
      "description": "The Kerberos principal name that Kafka runs as. This can be defined either in Kafka’s JAAS config or in Kafka’s config.",
      "required": false,
      "type": "string",
      "configurableInWizard": true
    },
    {
      "name": "client.sasl.mechanism",
      "label": "Client SASL Mechanism",
      "description": "SASL mechanism used for client connections. This may be any mechanism for which a security provider is available. GSSAPI is the default mechanism.",
      "required": false,
      "type": "string",
      "default": "GSSAPI",
      "configurableInWizard": true
    },
    {
      "name": "client.sasl.kerberos.kinit.cmd",
      "label": "Client SASL Kerneros Kinit Command",
      "description": "Kerberos kinit command path.",
      "required": false,
      "type": "path",
      "pathType": "localDataFile",
      "default": "/usr/bin/kinit",
      "configurableInWizard": true
    },
    {
      "name": "client.sasl.kerberos.min.time.before.relogin",
      "label": "Client SASL Kerneros Minimum Time Before Relogin",
      "description": "Login thread sleep time between refresh attempts.",
      "required": false,
      "type": "long",
      "default": 60000,
      "unit": "milliseconds",
      "configurableInWizard": true
    },
 {
      "name": "client.sasl.kerberos.ticket.renew.jitter",
      "label": "Client SASL Kerberos Ticket Renew Jitter",
      "description": "Percentage of random jitter added to the renewal time.",
      "required": false,
      "type": "double",
      "default": 0.05,
      "unit": "percent",
      "configurableInWizard": true
    },
    {
      "name": "client.sasl.kerberos.ticket.renew.window.factor",
      "label": "Client SASL Kerberos Ticket Renew Window Factor",
      "description": "Login thread will sleep until the specified window factor of time from last refresh to ticket’s expiry has been reached, at which time it will try to renew the ticket.",
      "required": false,
      "type": "double",
      "default": 0.8,
      "unit": "percent",
      "configurableInWizard": true
    },
    {
      "name": "producer.interceptor.classes",
      "label": "Producer Interceptor Classes",
      "description": "Producer interceptor classes.",
      "required": false,
      "type": "string",
      "configurableInWizard": true
    },
    {
      "name": "consumer.interceptor.classes",
      "label": "Consumer Interceptor Classes",
      "description": "Producer interceptor classes.",
      "required": false,
      "type": "string",
      "configurableInWizard": true
    }
  ],
  "roles": [
    {
      "name": "PARROT_STREAM_SERVER",
      "label": "Parrot Stream",
      "pluralLabel": "Parrot Stream",
      "jvmBased": true,
      "uniqueIdParameters": [
        "client.id"
        ],
      "startRunner": {
        "program": "scripts/control.sh",
        "args": [
          "start"
        ],
        "environmentVariables": {
          "HOST": "${host}",
          "PORT": "${rest.port}",
          "SSL_ENABLED": "${ssl_enabled}",
          "SSL_KEYSTORE_LOCATION": "${ssl_server_keystore_location}",
          "SSL_KEYSTORE_PASSWORD": "${ssl_server_keystore_password}",
          "SSL_TRUSTSTORE_LOCATION": "${ssl_client_truststore_location}",
          "SSL_TRUSTSTORE_PASSWORD": "${ssl_client_truststore_password}"
        }
      },
      "stopRunner" : {
        "timeout" : "30000"
      },
      "kerberosPrincipals" : [
        {
          "name" : "PARROT_PRINCIPAL",
          "primary" : "parrot",
          "instance" : "${host}"
        }
      ],
      "sslServer": {
        "keyIdentifier" : "parrot-stream",
        "enabledConfigName" : "ssl.enabled",
        "keystoreLocationConfigName" : "ssl.keystore.location",
        "keystorePasswordConfigName" : "ssl.keystore.password",
        "keyPasswordOptionality" : "required",
        "keystoreKeyPasswordConfigName" : "ssl.key.password"
      },
      "sslClient": {
        "truststoreLocationConfigName" : "ssl.truststore.location",
        "truststorePasswordConfigName" : "ssl.truststore.password"
      },
      "logging": {
        "dir": "/var/log/parrot-stream",
        "filename": "parrot-stream-${host}.log",
        "modifiable": true,
        "configName": "parrot-stream.log.dir",
        "loggingType": "log4j"
      },
      "configWriter": {
        "generators": [
          {
            "filename": "connect-avro-distributed.properties",
            "configFormat": "properties",
            "additionalConfigs" : [
              {
                "key" : "#plugin.path",
                "value" : "{{PLUGIN_PATH}}"
              },
              {
                "key" : "rest.host.name",
                "value" : "0.0.0.0"
              },
              {
                "key" : "config.storage.topic",
                "value" : "_config_${group.id}"
              },
              {
                "key" : "offset.storage.topic",
                "value" : "_offset_${group.id}"
              },
              {
                "key" : "status.storage.topic",
                "value" : "_status_${group.id}"
              },
              {
                "key" : "ssl.keystore.type",
                "value" : "JKS"
              },
              {
                "key" : "ssl.truststore.type",
                "value" : "JKS"
              }
            ]
          }
        ]
      },
      "parameters": [
        {
          "name": "client.id",
          "label": "Client ID",
          "description": "An id string to pass to the server when making requests. The purpose of this is to be able to track the source of requests beyond just ip/port by allowing a logical application name to be included in server-side request logging.",
          "type": "string"
        },
        {
          "name": "group.id",
          "label": "Group ID",
          "description": "A unique string that identifies the Connect cluster group this worker belongs to. Use only lowecase letters and numbers, eventually separated by dots.",
          "type": "string",
          "conformRegex": "[a-z.0-9]+",
          "required": true,
          "default": "parrot",
          "configurableInWizard": true
        },
        {
          "name": "config.storage.replication.factor",
          "label": "Config Storage Replication Factor",
          "description": "The replication factor used when Kafka Connects creates the topic used to store connector and task configuration data. This should always be at least 3 for a production system, but cannot be larger than the number of Kafka brokers in the cluster.",
          "type": "long",
          "required": false,
          "default": 3,
          "configurableInWizard": true
        },
        {
          "name": "offset.storage.replication.factor",
          "label": "Offset Storage Replication Factor",
          "description": "The replication factor used when Kafka Connects creates the topic used to store connector offsets. This should always be at least 3 for a production system, but cannot be larger than the number of Kafka brokers in the cluster.",
          "type": "long",
          "required": false,
          "default": 3,
          "configurableInWizard": true
        },
        {
          "name": "status.storage.replication.factor",
          "label": "Status Storage Replication Factor",
          "description": "The replication factor used when Kafka Connects creates the topic used to store connector and task status updates. This should always be at least 3 for a production system, but cannot be larger than the number of Kafka brokers in the cluster.",
          "type": "long",
          "required": false,
          "default": 3,
          "configurableInWizard": true
        },
        {
          "name": "offset.storage.partitions",
          "label": "Offset Storage Partitions",
          "description": "The number of partitions used when Kafka Connects creates the topic used to store connector offsets. A large value (e.g., 25 or 50, just like Kafka’s built-in __consumer_offsets topic) is necessary to support large Kafka Connect clusters.",
          "type": "long",
          "required": false,
          "default": 25,
          "configurableInWizard": true
        },
        {
          "name": "status.storage.partitions",
          "label": "Status Storage Partitions",
          "description": "The number of partitions used when Kafka Connects creates the topic used to store connector and task status updates.",
          "type": "long",
          "required": false,
          "default": 5,
          "configurableInWizard": true
        },
        {
          "name": "heartbeat.interval.ms",
          "label": "Heartbeat Interval",
          "description": "The expected time between heartbeats to the group coordinator when using Kafka’s group management facilities. Heartbeats are used to ensure that the worker’s session stays active and to facilitate rebalancing when new members join or leave the group. The value must be set lower than session.timeout.ms, but typically should be set no higher than 1/3 of that value. It can be adjusted even lower to control the expected time for normal rebalances.",
          "type": "long",
          "required": false,
          "default": 3000,
          "unit": "milliseconds",
          "configurableInWizard": true
        },
        {
          "name": "session.timeout.ms",
          "label": "Session Timeout",
          "description": "The timeout used to detect failures when using Kafka’s group management facilities.",
          "type": "long",
          "required": false,
          "default": 30000,
          "unit": "milliseconds",
          "configurableInWizard": true
        },
        {
          "name": "connections.max.idle.ms",
          "label": "Connections Maximum Idle Time",
          "description": "Close idle connections after the number of milliseconds specified by this config.",
          "type": "long",
          "required": false,
          "default": 540000,
          "unit": "milliseconds",
          "configurableInWizard": true
        },
        {
          "name": "reconnect.backoff.ms",
          "label": "Reconnect Backoff",
          "description": "The amount of time to wait before attempting to reconnect to a given host. This avoids repeatedly connecting to a host in a tight loop. This backoff applies to all requests sent by the consumer to the broker.",
          "type": "long",
          "required": false,
          "default": 50,
          "unit": "milliseconds",
          "configurableInWizard": true
        },
        {
          "name": "retry.backoff.ms",
          "label": "Retry Backoff",
          "description": "The amount of time to wait before attempting to retry a failed fetch request to a given topic partition. This avoids repeated fetching-and-failing in a tight loop.",
          "type": "long",
          "required": false,
          "default": 100,
          "unit": "milliseconds",
          "configurableInWizard": true
        },
        {
          "name": "request.timeout.ms",
          "label": "Request Timeout",
          "description": "The configuration controls the maximum amount of time the client will wait for the response of a request. If the response is not received before the timeout elapses the client will resend the request if necessary or fail the request if retries are exhausted.",
          "type": "long",
          "required": false,
          "default": 40000,
          "unit": "milliseconds",
          "configurableInWizard": true
        },
        {
          "name": "receive.buffer.bytes",
          "label": "Receive Buffer Size",
          "description": "The size of the TCP receive buffer (SO_RCVBUF) to use when reading data.",
          "type": "long",
          "required": false,
          "default": 32768,
          "unit": "bytes",
          "configurableInWizard": true
        },
        {
          "name": "send.buffer.bytes",
          "label": "Send Buffer Bytes",
          "description": "The size of the TCP send buffer (SO_SNDBUF) to use when sending data.",
          "type": "long",
          "required": false,
          "default": 131072,
          "unit": "bytes",
          "configurableInWizard": true
        },
        {
          "name": "worker.sync.timeout.ms",
          "label": "Worker Sync Timeout",
          "description": "When the worker is out of sync with other workers and needs to resynchronize configurations, wait up to this amount of time before giving up, leaving the group, and waiting a backoff period before rejoining.",
          "type": "long",
          "required": false,
          "default": 3000,
          "unit": "milliseconds",
          "configurableInWizard": true
        },
        {
          "name": "worker.unsync.backoff.ms",
          "label": "Worker Unsync Backoff",
          "description": "When the worker is out of sync with other workers and fails to catch up within worker.sync.timeout.ms, leave the Connect cluster for this long before rejoining.",
          "type": "long",
          "required": false,
          "default": 300000,
          "unit": "milliseconds",
          "configurableInWizard": true
        },
        {
          "name": "metadata.max.age.ms",
          "label": "Metadata Maximum Age",
          "description": "The period of time in milliseconds after which we force a refresh of metadata even if we haven’t seen any partition leadership changes to proactively discover any new brokers or partitions.",
          "type": "long",
          "required": false,
          "default": 300000,
          "unit": "milliseconds",
          "configurableInWizard": true
        },
        {
          "name": "metric.reporters",
          "label": "Metric Reporters",
          "description": "A list of classes to use as metrics reporters. Implementing the MetricReporter interface allows plugging in classes that will be notified of new metric creation. The JmxReporter is always included to register JMX statistics.",
          "required": false,
          "type": "string_array",
          "default": [],
          "configurableInWizard": true
        },
        {
          "name": "metrics.num.samples",
          "label": "Metric Number of Samples",
          "description": "The number of samples maintained to compute metrics.",
          "required": false,
          "type": "long",
          "default": 2,
          "configurableInWizard": true
        },
        {
          "name": "metrics.sample.window.ms",
          "label": "Metrics Sample Window",
          "description": "The number of samples maintained to compute metrics.",
          "required": false,
          "type": "long",
          "default": 30000,
          "unit": "milliseconds",
          "configurableInWizard": true
    },
        {
          "name": "ssl.enabled.protocols",
          "label": "SSL Enabled Protocols",
          "description": "The list of protocols enabled for SSL connections. TLSv1.2, TLSv1.1 and TLSv1 are enabled by default.",
          "required": false,
          "type": "string_array",
          "default": [
            "TLSv1.2",
            "TLSv1.1",
            "TLSv1"],
          "configurableInWizard": true
        },
        {
          "name": "ssl.protocol",
          "label": "SSL Protocol",
          "description": "The SSL protocol used to generate the SSLContext. Default setting is TLS, which is fine for most cases. Allowed values in recent JVMs are TLS, TLSv1.1 and TLSv1.2. SSL, SSLv2 and SSLv3 may be supported in older JVMs, but their usage is discouraged due to known security vulnerabilities.",
          "required": false,
          "type": "string_enum",
          "validValues": [
            "TLS",
            "TLSv1.1",
            "TLSv1.2",
            "SSL",
            "SSLv2",
            "SSLv3"
            ],
          "default": "TLS",
          "configurableInWizard": true
        },
        {
          "name": "ssl.provider",
          "label": "SSL Provider",
          "description": "The name of the security provider used for SSL connections. Default value is the default security provider of the JVM.",
          "required": false,
          "type": "string",
          "default": "",
          "configurableInWizard": true
        },
        {
          "name": "ssl.cipher.suites",
          "label": "SSL Cipher Suites",
          "description": "A list of cipher suites. This is a named combination of authentication, encryption, MAC and key exchange algorithm used to negotiate the security settings for a network connection using TLS or SSL network protocol.By default all the available cipher suites are supported.",
          "required": false,
          "type": "string_array",
          "default": [],
          "configurableInWizard": true
        },
        {
          "name": "ssl.endpoint.identification.algorithm",
          "label": "SSL Endpoint Identification Algorithm",
          "description": "The endpoint identification algorithm to validate server hostname using server certificate.",
          "required": false,
          "type": "string",
          "default": "",
          "configurableInWizard": true
        },
        {
          "name": "ssl.keymanager.algorithm",
          "label": "SSL Keymanager Algorithm",
          "description": "The algorithm used by key manager factory for SSL connections. Default value is the key manager factory algorithm configured for the Java Virtual Machine.",
          "required": false,
          "type": "string",
          "default": "SunX509",
          "configurableInWizard": true
        },
        {
          "name": "ssl.trustmanager.algorithm",
          "label": "SSL Trustmanager Algorithm",
          "description": "The algorithm used by trust manager factory for SSL connections. Default value is the trust manager factory algorithm configured for the Java Virtual Machine.",
          "required": false,
          "type": "string",
          "default": "PKIX",
          "configurableInWizard": true
        },
        {
          "name": "sasl.kerberos.service.name",
          "label": "SASL Kerberos Service Name",
          "description": "The configuration controls the maximum amount of time the client will wait for the response of a request. If the response is not received before the timeout elapses the client will resend the request if necessary or fail the request if retries are exhausted.",
          "type": "string",
          "required": false,
          "configurableInWizard": true
        },
        {
          "name": "sasl.kerberos.kinit.cmd",
          "label": "SASL Kerberos Kinit Command Path",
          "description": "Kerberos kinit command path. Default is /usr/bin/kinit",
          "required": false,
          "type": "path",
          "pathType": "localDataFile",
          "default": "/usr/bin/kinit",
          "configurableInWizard": true
        },
        {
          "name": "sasl.kerberos.min.time.before.relogin",
          "label": "SASL Kerberos Minimum Time Before Relogin",
          "description": "Login thread sleep time between refresh attempts.",
          "required": false,
          "type": "long",
          "default": 60000,
          "unit": "milliseconds",
          "configurableInWizard": true
        },
        {
          "name": "sasl.kerberos.ticket.renew.window.factor",
          "label": "SASL Kerberos Ticket Renew Window Factor",
          "description": "Login thread will sleep until the specified window factor of time from last refresh to ticket’s expiry has been reached, at which time it will try to renew the ticket.",
          "required": false,
          "type": "double",
          "default": 0.8,
          "unit": "percent",
          "configurableInWizard": true
        },
        {
          "name": "sasl.kerberos.ticket.renew.jitter",
          "label": "SASL Kerberos Ticket Renew Jitter",
          "description": "Percentage of random jitter added to the renewal time.",
          "required": false,
          "type": "double",
          "default": 0.05,
          "unit": "percent",
          "configurableInWizard": true
        },
        {
          "name": "security.protocol",
          "label": "Security Protocol",
          "description": "Protocol used to communicate with brokers. Currently only PLAINTEXT and SSL are supported.",
          "type": "string_enum",
          "validValues": [
            "PLAINTEXT",
            "SSL"
            ],
          "required": false,
          "configurableInWizard": true
        }
      ]
    }
  ],
  "gateway" : {
    "alternatives" : {
      "name" : "parrot-stream-conf",
      "linkRoot" : "/etc/parrot-stream",
      "priority" : 50
    },
    "scriptRunner" : {
      "program" : "scripts/deploy-client-config.sh",
      "args" : [
        "deploy"
        ],
      "environmentVariables": {
      }
    },
    "logging" : {
      "configFilename" : "parrot-stream-conf/client-log4j.properties",
      "loggingType" : "log4j"
    },
    "configWriter" : {
      "generators" : [
        {
          "filename" : "parrot-stream-conf/parrot-stream-client.properties",
          "configFormat" : "properties",
          "includedParams": [
          ]
        }
      ],
      "peerConfigGenerators" : [
        {
          "filename" : "parrot-stream-conf/parrot-stream-hostnames",
          "refreshable" : false,
          "params" : [ "rest.port", "ssl_enabled" ],
          "roleName" : "PARROT_STREAM_SERVER"
        }
      ]
    }
  }
}
